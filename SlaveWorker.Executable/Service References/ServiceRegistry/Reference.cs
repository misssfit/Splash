//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SlaveWorker.Executable.ServiceRegistry {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRegistry.IRegistry")]
    public interface IRegistry {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AssignServer", ReplyAction="http://tempuri.org/IRegistry/AssignServerResponse")]
        Common.ServerConnectionInfo AssignServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AssignServer", ReplyAction="http://tempuri.org/IRegistry/AssignServerResponse")]
        System.Threading.Tasks.Task<Common.ServerConnectionInfo> AssignServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AssignServerId", ReplyAction="http://tempuri.org/IRegistry/AssignServerIdResponse")]
        string AssignServerId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AssignServerId", ReplyAction="http://tempuri.org/IRegistry/AssignServerIdResponse")]
        System.Threading.Tasks.Task<string> AssignServerIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AcknowlegdeRegistration", ReplyAction="http://tempuri.org/IRegistry/AcknowlegdeRegistrationResponse")]
        bool AcknowlegdeRegistration(string serviceId, string uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AcknowlegdeRegistration", ReplyAction="http://tempuri.org/IRegistry/AcknowlegdeRegistrationResponse")]
        System.Threading.Tasks.Task<bool> AcknowlegdeRegistrationAsync(string serviceId, string uri);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegistryChannel : SlaveWorker.Executable.ServiceRegistry.IRegistry, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegistryClient : System.ServiceModel.ClientBase<SlaveWorker.Executable.ServiceRegistry.IRegistry>, SlaveWorker.Executable.ServiceRegistry.IRegistry {
        
        public RegistryClient() {
        }
        
        public RegistryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RegistryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Common.ServerConnectionInfo AssignServer() {
            return base.Channel.AssignServer();
        }
        
        public System.Threading.Tasks.Task<Common.ServerConnectionInfo> AssignServerAsync() {
            return base.Channel.AssignServerAsync();
        }
        
        public string AssignServerId() {
            return base.Channel.AssignServerId();
        }
        
        public System.Threading.Tasks.Task<string> AssignServerIdAsync() {
            return base.Channel.AssignServerIdAsync();
        }
        
        public bool AcknowlegdeRegistration(string serviceId, string uri) {
            return base.Channel.AcknowlegdeRegistration(serviceId, uri);
        }
        
        public System.Threading.Tasks.Task<bool> AcknowlegdeRegistrationAsync(string serviceId, string uri) {
            return base.Channel.AcknowlegdeRegistrationAsync(serviceId, uri);
        }
    }
}
