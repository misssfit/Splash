//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Splash.Server.RegistryServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringRequestStatus", Namespace="http://schemas.datacontract.org/2004/07/Splash.ServiceRegistry")]
    [System.SerializableAttribute()]
    public partial class StringRequestStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Splash.RemoteServiceContract.RequestStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Splash.RemoteServiceContract.RequestStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RegistryServiceReference.IRegistry")]
    public interface IRegistry {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AssignServer", ReplyAction="http://tempuri.org/IRegistry/AssignServerResponse")]
        Splash.Server.RegistryServiceReference.StringRequestStatus AssignServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AssignServer", ReplyAction="http://tempuri.org/IRegistry/AssignServerResponse")]
        System.Threading.Tasks.Task<Splash.Server.RegistryServiceReference.StringRequestStatus> AssignServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AssignServerId", ReplyAction="http://tempuri.org/IRegistry/AssignServerIdResponse")]
        string AssignServerId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AssignServerId", ReplyAction="http://tempuri.org/IRegistry/AssignServerIdResponse")]
        System.Threading.Tasks.Task<string> AssignServerIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AcknowlegdeRegistration", ReplyAction="http://tempuri.org/IRegistry/AcknowlegdeRegistrationResponse")]
        bool AcknowlegdeRegistration(string serviceId, string uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/AcknowlegdeRegistration", ReplyAction="http://tempuri.org/IRegistry/AcknowlegdeRegistrationResponse")]
        System.Threading.Tasks.Task<bool> AcknowlegdeRegistrationAsync(string serviceId, string uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/SynchronizeInactiveWorkers", ReplyAction="http://tempuri.org/IRegistry/SynchronizeInactiveWorkersResponse")]
        string[] SynchronizeInactiveWorkers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistry/SynchronizeInactiveWorkers", ReplyAction="http://tempuri.org/IRegistry/SynchronizeInactiveWorkersResponse")]
        System.Threading.Tasks.Task<string[]> SynchronizeInactiveWorkersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegistryChannel : Splash.Server.RegistryServiceReference.IRegistry, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegistryClient : System.ServiceModel.ClientBase<Splash.Server.RegistryServiceReference.IRegistry>, Splash.Server.RegistryServiceReference.IRegistry {
        
        public RegistryClient() {
        }
        
        public RegistryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RegistryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Splash.Server.RegistryServiceReference.StringRequestStatus AssignServer() {
            return base.Channel.AssignServer();
        }
        
        public System.Threading.Tasks.Task<Splash.Server.RegistryServiceReference.StringRequestStatus> AssignServerAsync() {
            return base.Channel.AssignServerAsync();
        }
        
        public string AssignServerId() {
            return base.Channel.AssignServerId();
        }
        
        public System.Threading.Tasks.Task<string> AssignServerIdAsync() {
            return base.Channel.AssignServerIdAsync();
        }
        
        public bool AcknowlegdeRegistration(string serviceId, string uri) {
            return base.Channel.AcknowlegdeRegistration(serviceId, uri);
        }
        
        public System.Threading.Tasks.Task<bool> AcknowlegdeRegistrationAsync(string serviceId, string uri) {
            return base.Channel.AcknowlegdeRegistrationAsync(serviceId, uri);
        }
        
        public string[] SynchronizeInactiveWorkers() {
            return base.Channel.SynchronizeInactiveWorkers();
        }
        
        public System.Threading.Tasks.Task<string[]> SynchronizeInactiveWorkersAsync() {
            return base.Channel.SynchronizeInactiveWorkersAsync();
        }
    }
}
